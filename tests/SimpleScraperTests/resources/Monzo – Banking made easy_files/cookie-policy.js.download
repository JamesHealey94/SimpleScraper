;(function() {
  /**
   * Setup for cookie notice dialog which will set a cookie for users who dismiss
   * the dialog.
   */
  document.addEventListener('DOMContentLoaded', function() {
    var cookiesConfig = [
      {
        name: 'dismissed-cookie-banner',
        cookieName: '_cookies_banner_dismissed',
      },
      {
        name: 'analytics',
        toggleId: 'toggle-analytics-cookies',
        cookieName: '_cookie_analytics_accepted',
      },
      {
        name: 'advertising',
        toggleId: 'toggle-advertising-cookies',
        cookieName: '_cookie_advertising_accepted',
      },
    ]

    // The cookie notice injection and interaction
    function cookiePolicy() {
      var context = null

      return {
        setup: function setup() {
          var content =
            '<div class="cookie-alert" role="dialog"><div class="cookie-alert__content"><div class="cookie-alert__inner-container"><div class="cookie-alert__text"><h2>Can we use optional cookies?</h2><p> We’re not talking about the crunchy, tasty kind. These cookies help us keep our website safe, give you a better experience and show more relevant ads. We won’t turn them on unless you accept. Want to know more or adjust your preferences? Here’s our <a href="/legal/cookie-notice">cookie notice</a>.</p></div><div class="cookie-alert__button-group"><button class="o-button js-accept-cookie-policy">Accept</button><button class="o-button-text js-decline-cookie-policy">Decline</button></div></div></div></div>'

          if (this.getCookie(cookiesConfig[0].cookieName) !== 'true') {
            var range = document.createRange()
            var cookieNode = range.createContextualFragment(content)
            document.body.insertBefore(cookieNode, document.body.firstChild)
            this.context = document.querySelector('.cookie-alert')
            this.context
              .querySelector('.js-accept-cookie-policy')
              .addEventListener(
                'click',
                function(e) {
                  e.preventDefault()
                  this.closeAndSetCookie()
                }.bind(this),
              )
            this.context
              .querySelector('.js-decline-cookie-policy')
              .addEventListener(
                'click',
                function(e) {
                  e.preventDefault()
                  this.declineCookies()
                }.bind(this),
              )
          }
        },

        emitEvent: function emitEvent(
          eventName = 'user_has_accepted_all_cookies',
        ) {
          if (!document) return null
          var event
          if (typeof Event === 'function') {
            event = new Event(eventName)
          } else {
            event = document.createEvent('Event')
            event.initEvent(eventName, true, true)
          }

          window.dispatchEvent(event)
        },

        closeAndSetCookie: function closeAndSetCookie() {
          this.context.parentNode.removeChild(this.context)
          cookiesConfig.forEach(
            function(cookie) {
              this.setCookie(cookie.cookieName, 'true', 3000)
            }.bind(this),
          )
          this.emitEvent()
        },

        declineCookies: function closeAndSetCookie() {
          this.context.parentNode.removeChild(this.context)

          var dismissedCookieConfig = cookiesConfig.filter(function(conf) {
            return conf.name === 'dismissed-cookie-banner' ? true : false
          })

          if (dismissedCookieConfig.length > 0) {
            this.setCookie(dismissedCookieConfig[0].cookieName, 'true', 3000)
          }
        },

        setCookie: function setCookie(name, value, exdays) {
          var d = new Date()
          d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000)
          var expires = 'expires=' + d.toUTCString()
          document.cookie = name + '=' + value + '; ' + expires + ';path=/'
        },

        getCookie: function getCookie(name) {
          var name = name + '='
          var ca = document.cookie.split(';')
          for (var i = 0; i < ca.length; i++) {
            var c = ca[i]
            while (c.charAt(0) == ' ') {
              c = c.substring(1)
            }
            if (c.indexOf(name) === 0) {
              return c.substring(name.length, c.length)
            }
          }
          return ''
        },
      }
    }

    cookiePolicy().setup()

    // Add event listeners for the toggles if on the cookie policy page
    if (window.location.pathname === '/legal/cookie-notice/') {
      cookiesConfig.forEach(function(cookie) {
        var configForm = document.getElementById(cookie.toggleId)

        if (configForm) {
          // Sets the initial value of the forms
          if (cookiePolicy().getCookie(cookie.cookieName) === 'true') {
            configForm['on'].checked = true
          } else {
            configForm['off'].checked = true
          }

          configForm.addEventListener('submit', function(ev) {
            ev.preventDefault()
            const value = configForm['cookie-enabled'].value
            if (value === 'on') {
              cookiePolicy().setCookie(cookie.cookieName, 'true', 3000)
            } else {
              cookiePolicy().setCookie(cookie.cookieName, 'false', 3000)
            }
          })
        }
      })
    }
  })
})()
